apply plugin: 'com.android.application'

android {
	compileSdkVersion 29
	buildToolsVersion '28.0.3'
	ndkVersion '21.0.6113669'

	compileOptions {
		sourceCompatibility JavaVersion.VERSION_1_8
		targetCompatibility JavaVersion.VERSION_1_8
	}

	defaultConfig {
		applicationId 'org.openobservatory.ooniprobe'
		minSdkVersion 17
		targetSdkVersion 29
		versionName '2.3.2'
		versionCode 59
		testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
		buildConfigField 'String', 'OONI_ORCHESTRATE_BASE_URL', '"https://orchestrate.ooni.io/"'
		buildConfigField 'String', 'OONI_API_BASE_URL', '"https://api.ooni.io/"'
		buildConfigField 'String', 'NOTIFICATION_SERVER', '"https://registry.proteus.ooni.io"'
		resValue "string", "APP_NAME", "OONI Probe"
		buildConfigField 'String', 'SOFTWARE_NAME', 'BASE_SOFTWARE_NAME+IS_DEBUG'
	}

	buildTypes {
		debug {
			buildConfigField 'String', 'NOTIFICATION_SERVER', '"https://registry.proteus.test.ooni.io"'
			buildConfigField 'String', 'IS_DEBUG', '"-debug"'
		}

		release {
			minifyEnabled false
			proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
			buildConfigField 'String', 'IS_DEBUG', '""'
		}
	}

	flavorDimensions 'testing', 'license'
	productFlavors {
		stable {
			dimension 'testing'
			buildConfigField 'String', 'BASE_SOFTWARE_NAME', '"ooniprobe-android"'
		}
		dev {
			dimension = 'testing'
			applicationIdSuffix = '.dev'
			versionName = versionNameDate()
			versionCode = versionCodeDate()
			buildConfigField 'String', 'BASE_SOFTWARE_NAME', '"ooniprobe-android-dev"'
			resValue "string", "APP_NAME", "OONI Dev"
		}
		experimental {
			dimension = 'testing'
			applicationIdSuffix = '.experimental'
			versionName = versionNameDate()
			versionCode = versionCodeDate()
			buildConfigField 'String', 'BASE_SOFTWARE_NAME', '"ooniprobe-android-experimental"'
			resValue "string", "APP_NAME", "OONI Exp"
		}
		fdroid {
			dimension 'license'
		}
		full {
			dimension 'license'
		}
	}
	variantFilter { variant ->
		def names = variant.flavors*.name
		if (names.contains("fdroid") && (names.contains("experimental") || names.contains("dev"))) {
			setIgnore(true)
		}
	}
}


dependencies {
	implementation 'androidx.appcompat:appcompat:1.1.0'

	fullImplementation 'com.google.firebase:firebase-messaging:20.1.4'
	fullImplementation 'com.google.firebase:firebase-core:17.3.0'

	annotationProcessor 'com.github.Raizlabs.DBFlow:dbflow-processor:4.2.4'
	implementation 'com.github.Raizlabs.DBFlow:dbflow-core:4.2.4'
	implementation 'com.github.Raizlabs.DBFlow:dbflow:4.2.4'

	implementation 'com.squareup.retrofit2:retrofit:2.6.0'
	implementation 'com.squareup.retrofit2:converter-gson:2.6.0'
	implementation 'com.squareup.okhttp3:logging-interceptor:4.0.1'

	implementation 'com.jakewharton:butterknife:10.2.1'
	annotationProcessor 'com.jakewharton:butterknife-compiler:10.2.1'

	fullImplementation 'com.crashlytics.sdk.android:crashlytics:2.10.1'
	implementation 'com.github.xanscale.LocalhostToolkit:app:19.05.01'
	implementation 'pub.devrel:easypermissions:3.0.0'
	implementation 'com.airbnb.android:lottie:3.0.7'
	implementation 'com.google.code.gson:gson:2.8.6'
	implementation 'ru.noties:markwon:2.0.1'
	implementation 'commons-io:commons-io:2.6'

	//arcview to fragment_dashboard
	implementation 'com.github.florent37:shapeofview:1.3.2'

	//constraint layout
	implementation "androidx.constraintlayout:constraintlayout:1.1.3"

	androidTestImplementation 'androidx.test:runner:1.2.0'
	androidTestImplementation 'androidx.test:rules:1.2.0'
	implementation project(path: ':engine')
}

static def versionCodeDate() {
	return new Date().format("yyyyMMdd").toInteger()
}

static def versionNameDate() {
	return new Date().format("yyyy.MM.dd-HH")
}

if (!getGradle().getStartParameter().getTaskRequests()
		.toString().contains("Fdroid")){
	apply plugin: 'com.google.gms.google-services'
	apply plugin: 'io.fabric'
}
